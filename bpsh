#!/usr/bin/env bash
# This script was generated by bashly 0.9.4 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
bpsh_usage() {
  if [[ -n $long_usage ]]; then
    printf "bpsh - A shell script for Cloud Native Buildpacks using Podman and CNB lifecycle commands\n"
    echo

  else
    printf "bpsh - A shell script for Cloud Native Buildpacks using Podman and CNB lifecycle commands\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  bpsh COMMAND\n"
  printf "  bpsh [COMMAND] --help | -h\n"
  printf "  bpsh --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Use Cloud Native Buildpacks to create a runnable app image from source code\n" "build "
  printf "  %s   Rebase app image with latest run image\n" "rebase"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
bpsh_build_usage() {
  if [[ -n $long_usage ]]; then
    printf "bpsh build - Use Cloud Native Buildpacks to create a runnable app image from source code\n"
    echo

  else
    printf "bpsh build - Use Cloud Native Buildpacks to create a runnable app image from source code\n"
    echo

  fi

  printf "Alias: b\n"
  echo

  printf "%s\n" "Usage:"
  printf "  bpsh build IMAGE [OPTIONS]\n"
  printf "  bpsh build --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--path, -p PATH"
    printf "    Path to app dir\n"
    printf "    Default: .\n"
    echo

    # :flag.usage
    printf "  %s\n" "--builder, -B BUILDER"
    printf "    Builder image\n"
    printf "    Default: docker.io/paketobuildpacks/builder\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "IMAGE"
    printf "    The name of the image that will be built\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  bpsh build foo/goapp --path /path/to/foo/goapp\n"
    printf "  bpsh build bar/phpapp --builder docker.io/paketobuildpacks/builder:full\n"
    echo

  fi
}

# :command.usage
bpsh_rebase_usage() {
  if [[ -n $long_usage ]]; then
    printf "bpsh rebase - Rebase app image with latest run image\n"
    echo

  else
    printf "bpsh rebase - Rebase app image with latest run image\n"
    echo

  fi

  printf "Alias: r\n"
  echo

  printf "%s\n" "Usage:"
  printf "  bpsh rebase IMAGE [OPTIONS]\n"
  printf "  bpsh rebase --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--builder, -B BUILDER"
    printf "    Builder image\n"
    printf "    Default: docker.io/paketobuildpacks/builder\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "IMAGE"
    printf "    The name of the image to rebase\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  bpsh rebase foo/bar\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
  if ((${#args[@]})); then
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi
}

# :command.command_functions
# :command.function
bpsh_build_command() {
  # src/build_command.sh
  image=${args[image]}
  src=${args[--path]}
  builder=${args[--builder]}

  CT=$(podman run -itd ${builder} /bin/sh)
  podman cp $src $CT:/src
  podman exec $CT bash -c "/cnb/lifecycle/creator -app=/src ${image}" 1>&2
  podman exec $CT bash -c "cat /layers/report.toml"
  podman stop $CT > /dev/null
  podman rm $CT > /dev/null

}

# :command.function
bpsh_rebase_command() {
  # src/rebase_command.sh
  image=${args[image]}
  builder=${args[--builder]}

  CT=$(podman run -itd ${builder} /bin/sh)
  podman exec $CT bash -c "/cnb/lifecycle/rebaser ${image}" 1>&2
  podman exec $CT bash -c "cat /layers/report.toml"
  podman stop $CT > /dev/null
  podman rm $CT > /dev/null

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        bpsh_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    build | b)
      action="build"
      shift
      bpsh_build_parse_requirements "$@"
      shift $#
      ;;

    rebase | r)
      action="rebase"
      shift
      bpsh_rebase_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      bpsh_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
bpsh_build_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        bpsh_build_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="build"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --path | -p)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--path']="$2"
          shift
          shift
        else
          printf "%s\n" "--path requires an argument: --path, -p PATH" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --builder | -B)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--builder']="$2"
          shift
          shift
        else
          printf "%s\n" "--builder requires an argument: --builder, -B BUILDER" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['image']+x} ]]; then

          args['image']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['image']+x} ]]; then
    printf "missing required argument: IMAGE\nusage: bpsh build IMAGE [OPTIONS]\n" >&2
    exit 1
  fi

  # :command.default_assignments
  [[ -n ${args['--path']:-} ]] || args['--path']="."
  [[ -n ${args['--builder']:-} ]] || args['--builder']="docker.io/paketobuildpacks/builder"

}

# :command.parse_requirements
bpsh_rebase_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        bpsh_rebase_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="rebase"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --builder | -B)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--builder']="$2"
          shift
          shift
        else
          printf "%s\n" "--builder requires an argument: --builder, -B BUILDER" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['image']+x} ]]; then

          args['image']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['image']+x} ]]; then
    printf "missing required argument: IMAGE\nusage: bpsh rebase IMAGE [OPTIONS]\n" >&2
    exit 1
  fi

  # :command.default_assignments
  [[ -n ${args['--builder']:-} ]] || args['--builder']="docker.io/paketobuildpacks/builder"

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

  # src/initialize.sh

}

# :command.run
run() {
  declare -A args=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "build")
      if [[ ${args['--help']:-} ]]; then
        long_usage=yes
        bpsh_build_usage
      else
        bpsh_build_command
      fi
      ;;

    "rebase")
      if [[ ${args['--help']:-} ]]; then
        long_usage=yes
        bpsh_rebase_usage
      else
        bpsh_rebase_command
      fi
      ;;

  esac
}

initialize
run "$@"
